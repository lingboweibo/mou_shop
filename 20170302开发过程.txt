Home是前台模块
Admin是后台模块

如果不用自动生成模块，可以用下面的方法自己建一个模块
建一个Admin作为后台模块
再按自己需要在它的下面建立如下文件夹
	如果我们的Admin模块需要一些公共函数的话就可以在Admin文件夹下面建一个Common ，此文件夹的作用是放本模块公共函数文件
	如果我们的Admin模块需要一个配置的话就可以在Admin文件夹下面建一个Conf ，此文件夹的作用是放本模块的配置文件
	建一个控制器目录 Controller，建好之还要在里面写控制器文件
	如果我们的Admin模块需要把模板文件放在默认的View文件夹里，也要在在Admin文件夹下面建一个View文件夹，此文件夹的作用是放本模块的模板文件


模块的公共函数 是指定在这个模块所有文件都可调用的函数，在别的模块就不可调用的。
如果我们项目的这个模块需要一个本模块能调用的，其它模块不能调用的函数，那就需要这个Common公共函数文件夹，否则就可以不要。

模块的配置文件夹Conf，如果需要就建，不需要就不建。
加载的顺序是：惯例配置->应用配置->模式配置->调试配置->状态配置->模块配置

在后面加载的配置会复盖前面加载的配置，如果我这个模块需要复盖前面加载的同名的配置，那就是需建这个Conf文件夹


建好这些之后就可以在控制器目录建写控制器代码


我做的商城项目的根目录是 C:\web_study\php\mou_shop 这个文件夹
你们更新下来之后复制到自己的文件夹。然后建一个Admin模块，然后建好控制器和写好控制器里面的操作。功能暂时不实现，只是写好操作名和在里面简单的echo，然后 看看能不能访问

做好登录页面的模板文件（从后台页面模板复制相关的前端人员做的页面过来）然后改成TP格式的模板文件（主要就改文件名跟操作名相同，后缀跟我们配置的后缀一样），如果模板文件里有链接或其它动态的网址，一般都要改成用TP的U方法生成的网址。

再改登录控制器，暂时不管密码对错，立即跳转到员工列表页面，再把员工列表页面模板文件做好，和在员工列表操作里加上渲染模板的代码


======================================下午开始做了这些=========================
1 后台的配置文件 Application\Admin\Conf\config.php （如果不存在可以自己新建）
  改后台的配置文件，把模板引擎改为PHP
  改后台的配置文件，把模板后缀改为PHP （如果用HTML作为后缀，别人直接打开这个HTML文件的网址时会能够看到PHP代码）

2 后台很多页面都有相同的部分，应该改成用引入包含文件的形式
  在 Application\Admin\View 下面建一个目录 include 用来放包含文件 
  然后在Application\Admin\View\include 目录下面建两个文件: header.php (此文件放公共的头部内容) 、left.php (此文件放公共的左侧菜单) 
  
  在需要引入 公共的头部内容 和 公共的左侧菜单 的文件引入这两公共文件
  
  include 应用目录/模块名/模板目录/include/header.php';
  include 应用目录/模块名/模板目录/include/left.php';
  
  获取到 应用名/模块名/View/控制器名 这些各种的名称的值，可以查手册里的附录/常量参考
  
  APP_PATH 应用目录（默认为入口文件所在目录）
  MODULE_NAME 当前模块名  
  CONTROLLER_NAME 当前控制器名  
  模板目录默认是View，如果动态获取可以用 C('DEFAULT_V_LAYER') 来获取

3 把管理员列表 的添加管理员链接改成用U方法生成的URL链接到添加管理员表单页面
4 再把添加管理员表单页的表单的action 改成用U方法生成的URL（是接收添加管理员的操作接收）

=========模板文件相关规划=========
1 HTML里的很多页面的各种meta标签和引入CSS、JS的代码都一样，也应该放入一个公共文件
 再在Application\Admin\View\include 目录下面建一个文件 meta.php
 把很多页面的各种meta标签和引入CSS、JS的代码都一样的部分放到 meta.php 文件里，然后在需要有这些代码的文件的相应地方引入 meta.php 文件

2 CSS、JS 文件的路径可能有时会有改动调用，考虑把这些文件路径保存到一个常量里，给后台配置文件增加一个 静态资源文件目录的配置项
 'STATIC_PATH' => '/statics',//表示静态CSS、JS 之类文件的目录
  然后再改meta.php 里面用到CSS、JS 的文件的路径的地方(也就是把 /statics )改为 <?php echo C('STATIC_PATH');?>

3 为了让静态文件不被缓存或能控制不被缓存，给后台配置文件增加一个增加静态文件版本号配置项
 'STATIC_VERSION' => 1,//静态文件版本号

4 再给 meta.php 文件里引入的JS和CSS文件的文件名后面增加 ?v=<?php echo C('STATIC_VERSION');?>
  jquery-1.8.2.min.js 这是jq文件，我不会把改它，所以就不加版本号，让它一直缓存都没关系
  font-awesome.min.css 这是字体图标的样式文件，我也不会去改它，所以也不加版本号，让它一直缓存都没关系
  也就是在pub.css后面加,pub.js后面也加
  一般网址在文件名后面加?xx=yyy 对这个文件的效果没有影响，但后面加的get参数不同的话，浏览器就会认为是不同的网址，如果这个网址是第一次打开就不会有缓存

5 为了开发期间容易发现错误，修改应用配置文件 Application\Common\Conf\config.php
  增加 'SHOW_PAGE_TRACE' =>true,// 表示在右下角显示跟踪调试信息

6 为了让网站名称也可以修改一个地方，然后全站生效，把网站名称也加到应用配置文件 Application\Common\Conf\config.php 里
  增加 'WEBSITE_NAME' =>'某某商城',// 表示在右下角显示跟踪调试信息
  然后把网站所有用到网站名称的地方都改为读取这个配置项的名称来使用

7 把Application\Admin\View\include\left.php 里的商店管理去掉

8 把Application\Admin\View\include\left.php 里的 管理员设置 的链接改为用U方法得到的URL

=========控制器相关规划=========
1 因为后台会有多个控制器，同时后台各个控制器也都需要一些公共的方法函数，所以设计了一个公共控制器，然后让所有后台控制器都继承这个公共控制器，所以要把后台的所有控制器都继承这个公共控制器，所以要把后台所有控制器都改成继承我们自己建的后台公共控制器

	后台公共控制器的构造函数改成如下：
	function __construct(){
		parent::__construct();//调用父类的构造函数。
	}

后台其它控制器都继承后台公共控制器，后台公共控制器就继承TP的核心控制器


=======模型================

1 在应用配置文件增加数据库连接相关配置
2 建一个数据库，名称是 mou_shop
3 建好员工表，表名是admin，详细字段 看教程上的
4 手动直接在数据库里添加一条记录，让员工表里有一个管理员



M方法实例化模型

M('表名');

$model = M('admin');//得到一个员工表的模型
$model->find();//调用模型的查询一条记录的方法